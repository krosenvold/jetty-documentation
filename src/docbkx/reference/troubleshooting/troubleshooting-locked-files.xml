<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="troubleshooting-locked-files-on-windows"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Troubleshooting Locked Files on Windows</title>
  <para>
    Jetty buffers static content for webapps such as HTML files, CSS files, images, etc. If you are using NIO connectors, Jetty uses memory-mapped files to do this. The problem is that on Windows, memory mapping a file causes the file to lock, so that you cannot update or replace the file. Effectively this means that you have to stop Jetty to update a file.
  </para>
<section>
  <title>Remedy</title>
  <para>
    Jetty provides a configuration switch in the <filename>webdefault.xml</filename> file for the DefaultServlet that enables or disables the use of memory-mapped files. If you are running on Windows and are having file-locking problems, you should set this switch to disable memory-mapped file buffers.
  </para>
  <para>
    The default <filename>webdefault.xml</filename> file is found in the jetty distribution under the <filename>etc/</filename> directory or in the <filename>jetty-webapp-${version}.jar</filename> artifact at <filename>org/eclipse/jetty/webapp/webdefault.xml</filename>. Edit the file in the distribution or extract it to a convenient disk location and edit it to change <code>useFileMappedBuffer</code> to false.  The easiest option is to simply edit the default file contained in the jetty distribution itself.
  </para>
  <informalexample>
    <programlisting language="xml"><![CDATA[
<init-param>
   <param-name>useFileMappedBuffer</param-name>
   <param-value>true</param-value> <!-- change to false -->
 </init-param>
 ]]>
    </programlisting>
  </informalexample>
  <para>
    Make sure to apply your custom <filename>webdefault.xml</filename> file to all of your webapps. You can do that by changing the configuration of the Deployment Manager in <filename>etc/jetty-deploy.xml</filename>.
  </para>

  <informalexample>
    <programlisting language="xml"><![CDATA[
<Call id="webappprovider" name="addAppProvider">
  <Arg>
    <New class="org.eclipse.jetty.deploy.providers.WebAppProvider">
      .
      .
      <!-- this should be the new custom webdefault.xml or change should be made in this file -->
      <Set name="defaultsDescriptor"><Property name="jetty.home" default="." />/etc/webdefault.xml</Set>
      <Set name="scanInterval">1</Set>
      <Set name="extractWars">true</Set>
      .
      .
    </New>
  </Arg>
</Call>
]]>
    </programlisting>
  </informalexample>
  <para>
    Alternatively, if you have individually configured your webapps with context xml files, you need to call the <code>WebAppContext.setDefaultsDescriptor(String path)</code> method:
  </para>
  <informalexample>
    <programlisting language="xml"><![CDATA[
<New id="myWebAppContext"  class="org.eclipse.jetty.webapp.WebAppContext">
  <Set name="contextPath">/</Set>
  <Set name="war">./webapps/fredapp</Set>
  <Set name="defaultsDescriptor">/home/fred/jetty/mywebdefaults.xml</Set>
  .
  .
</New>
]]>
    </programlisting>
  </informalexample>
</section>
<section>
  <title>Alternate Remedy</title>
  <para>
    You can force a <code>WebAppContext</code> to always copy a web app directory on deployment to avoid the file locking issue. Configure this in a context deployment file as follows:
  </para>
  <informalexample>
    <programlisting language="xml"><![CDATA[
<New id="myWebAppContext"  class="org.eclipse.jetty.webapp.WebAppContext">
  <Set name="contextPath">/</Set>
  <Set name="war">./webapps/fredapp</Set>
  <Set name="copyWebDir">true</Set>
  .
  .
</New>
]]>
    </programlisting>
  </informalexample>
  <para>
    You can also configure the default Jetty Servlet directly in the <filename>web.xml</filename>. For example:
  </para>
  <informalexample>
    <programlisting language="xml"><![CDATA[
<web-app ...>
 ...
 <servlet>
     <servlet-name>Default</servlet-name>
     <servlet-class>org.eclipse.jetty.servlet.DefaultServlet</servlet-class>
     <init-param>
       <param-name>useFileMappedBuffer</param-name>
       <param-value>false</param-value>
     </init-param>
     <load-on-startup>0</load-on-startup>
   </servlet>
 ...
 </web-app>
 ]]>
    </programlisting>
  </informalexample>
  <para>
    This might completely redefine the default servlet configuration (not sure about that, if anyone can confirm). You could still simply extract the webdefault file as explained above, and copy-paste the complete default servlet definition in your web.xml, changing that <code>useFileMappedBuffer</code> parameter to false.
  </para>
</section>

  <section>
    <title>Remedy for ResourceHandler</title>
    <para>
      If you are serving static content with a <code>ResourceHandler</code>, you will need to force this handler to avoid using NIO:
    </para>
    <informalexample>
      <programlisting language="xml"><![CDATA[
          ResourceHandler rh = ...
          rh.setMinMemoryMappedContentLength(Integer.MAX_VALUE);
      ]]></programlisting>
    </informalexample>
  </section>

</section>
